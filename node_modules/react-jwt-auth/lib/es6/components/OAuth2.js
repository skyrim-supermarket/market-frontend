'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _storage = require('../internals/storage');

var _storage2 = _interopRequireDefault(_storage);

var _PopupButton = require('./PopupButton');

var _PopupButton2 = _interopRequireDefault(_PopupButton);

var _local = require('../local');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var propTypes = {
	name: _react.PropTypes.string.isRequired,
	label: _react.PropTypes.string,
	clientId: _react.PropTypes.string.isRequired,
	onSignIn: _react.PropTypes.func,
	onSignInSuccess: _react.PropTypes.func,
	onSignInFailed: _react.PropTypes.func,
	tokenEndpoint: _react.PropTypes.string.isRequired,
	oauthProvider: _react.PropTypes.string.isRequired,
	oauthEndpoint: _react.PropTypes.string.isRequired,
	redirectUri: _react.PropTypes.string,
	scope: _react.PropTypes.arrayOf(_react.PropTypes.string),
	scopePrefix: _react.PropTypes.string,
	scopeDelimiter: _react.PropTypes.string,
	state: _react.PropTypes.oneOfType([_react.PropTypes.string, _react.PropTypes.func]),
	requiredUrlParams: _react.PropTypes.arrayOf(_react.PropTypes.string),
	defaultUrlParams: _react.PropTypes.arrayOf(_react.PropTypes.string),
	responseType: _react.PropTypes.string,
	responseParams: _react.PropTypes.arrayOf(_react.PropTypes.string),
	oauthType: _react.PropTypes.string,
	popupOptions: _react.PropTypes.shape({
		width: _react.PropTypes.number,
		height: _react.PropTypes.number
	}),
	style: _react.PropTypes.object,
	polling: _react.PropTypes.bool
};

var defaultProps = {
	defaultUrlParams: ['response_type', 'client_id', 'redirect_uri'],
	responseType: 'code',
	responseParams: ['code', 'clientId', 'redirectUri'],
	oauthType: '2.0',
	style: {},
	popupOptions: { width: 500, height: 500 },
	polling: true
};

var OAuth2 = function (_Component) {
	_inherits(OAuth2, _Component);

	function OAuth2(props) {
		_classCallCheck(this, OAuth2);

		//const { name, state, popupOptions, redirectUri, responseType } = params
		var _this = _possibleConstructorReturn(this, (OAuth2.__proto__ || Object.getPrototypeOf(OAuth2)).call(this, props));

		_this.onClick = _this.onClick.bind(_this);
		_this.onClose = _this.onClose.bind(_this);
		return _this;
	}

	_createClass(OAuth2, [{
		key: 'buildQueryString',
		value: function buildQueryString() {
			var props = this.props;
			var urlParamsCategories = ['defaultUrlParams', 'requiredUrlParams', 'optionalUrlParams'];
			var keyValuePairs = [];

			urlParamsCategories.forEach(function (paramsCategory) {

				if (!props[paramsCategory] || !props[paramsCategory].forEach) {
					return;
				}

				props[paramsCategory].forEach(function (paramName) {

					var paramValue = typeof props[paramName] === 'function' ? props[paramName]() : props[OAuth2.camelCase(paramName)];

					if (paramName === 'redirect_uri' && !paramValue) {
						return;
					}

					if (paramName === 'state') {
						var stateName = props.name + '_state';
						paramValue = encodeURIComponent(_storage2.default.get(stateName));
					}

					if (paramName === 'scope' && Array.isArray(paramValue)) {
						paramValue = paramValue.join(props.scopeDelimiter);
						if (props.scopePrefix) {
							paramValue = [props.scopePrefix, paramValue].join(props.scopeDelimiter);
						}
					}

					keyValuePairs.push([paramName, paramValue]);
				});
			});

			return keyValuePairs.map(function (pair) {
				return pair.join('=');
			}).join('&');
		}
	}, {
		key: 'onClick',
		value: function onClick() {
			if (this.onSignIn) {
				this.onSignIn(Object.assign({}, this.props));
			}
		}
	}, {
		key: 'onClose',
		value: function onClose(queryStringData) {
			var _this2 = this;

			if (!queryStringData.error) {
				(function () {
					var oauthData = {};
					var provider = _this2.props.oauthProvider;
					_this2.props.responseParams.forEach(function (prop) {
						switch (prop) {
							case 'code':
								oauthData[prop] = queryStringData.code;
								break;
							case 'clientId':
							case 'redirectUri':
								oauthData[prop] = _this2.props[prop];
								break;
							default:
								oauthData[prop] = queryStringData[key];
						}
					});

					(0, _local.exchangeCodeForToken)(provider, oauthData).then(function (token) {
						if (_this2.props.onSignInSuccess) {
							_this2.props.onSignInSuccess({ token: token });
						}
					}).catch(function (error) {
						if (_this2.props.onSignInFailed) {
							_this2.props.onSignInFailed(error);
						}
					});
				})();
			}
		}
	}, {
		key: 'render',
		value: function render() {
			var props = this.props;
			var popupProps = {
				label: props.label,
				width: props.width,
				height: props.height,
				popupUrl: [props.oauthEndpoint, this.buildQueryString()].join('?'),
				redirectUri: props.redirectUri, // todo: remove coupling with popup
				polling: props.polling,
				onClick: this.onClick,
				onClose: this.onClose,
				style: props.style,
				className: props.className
			};

			return _react2.default.createElement(
				_PopupButton2.default,
				popupProps,
				this.props.children || null
			);
		}
	}]);

	return OAuth2;
}(_react.Component);

exports.default = OAuth2;


OAuth2.camelCase = function (name) {
	return name.replace(/([\:\-\_]+(.))/g, function (_, separator, letter, offset) {
		return offset ? letter.toUpperCase() : letter;
	});
};

OAuth2.propTypes = propTypes;
OAuth2.defaultProps = defaultProps;