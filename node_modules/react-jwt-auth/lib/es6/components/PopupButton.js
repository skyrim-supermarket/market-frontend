'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _utils = require('../internals/utils');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var propTypes = {
	style: _react.PropTypes.object,
	width: _react.PropTypes.number,
	height: _react.PropTypes.number,
	popupUrl: _react.PropTypes.string.isRequired,
	autoClose: _react.PropTypes.bool,
	autoCloseUri: _react.PropTypes.string,
	onClick: _react.PropTypes.func,
	onClose: _react.PropTypes.func,
	polling: _react.PropTypes.bool
};

var defaultProps = {
	style: {},
	width: 500,
	height: 500,
	polling: true,
	autoClose: true
};

var PopupButton = function (_React$Component) {
	_inherits(PopupButton, _React$Component);

	function PopupButton(props) {
		_classCallCheck(this, PopupButton);

		var _this = _possibleConstructorReturn(this, (PopupButton.__proto__ || Object.getPrototypeOf(PopupButton)).call(this, props));

		_this.state = {
			open: false
		};

		_this.onClick = _this.onClick.bind(_this);
		return _this;
	}

	_createClass(PopupButton, [{
		key: 'componentDidUpdate',
		value: function componentDidUpdate() {
			if (this.state.open) {
				this.open();
			}
		}
	}, {
		key: 'onClick',
		value: function onClick() {
			this.setState({ open: true });
			if (this.props.onClick) {
				this.props.onClick();
			}
		}
	}, {
		key: 'onClose',
		value: function onClose(queryStringData) {
			this.setState({ open: false });
			if (this.props.onClose) {
				this.props.onClose(queryStringData);
			}
		}
	}, {
		key: 'open',
		value: function open() {
			var _props = this.props,
			    height = _props.height,
			    width = _props.width;

			var options = {
				width: width,
				height: height,
				top: window.screenY + (window.outerHeight - height) / 2.5,
				left: window.screenX + (window.outerWidth - width) / 2,
				resizable: 0, // IE only
				scrollbars: 0 // IE, Firefox & Opera only
			};

			var popup = window.open(this.props.popupUrl, '_blank', PopupButton.generateSpec(options));
			popup.focus();

			if (this.props.popupUrl === 'about:blank') {
				popup.document.body.innerHTML = 'Loading...';
			}

			if (this.props.polling) {
				this.pollPopup(popup);
			}
		}
	}, {
		key: 'pollPopup',
		value: function pollPopup(window) {
			var _this2 = this;

			var autoCloseUriPath = !this.props.autoCloseUri ? document.location.origin + document.location.pathname : this.props.autoCloseUri;

			var queryStringData = {};
			var closing = false;

			var polling = setInterval(function () {
				if (!window || window.closed || closing) {
					clearInterval(polling);
					if (queryStringData.error) {
						console.error(queryStringData.error);
					}
					_this2.onClose(queryStringData);
					window.close();
				}
				try {
					var popupUrlPath = window.location.origin + window.location.pathname;

					// todo: decouple, use handler to this outside
					if (popupUrlPath === autoCloseUriPath) {
						if (window.location.search || window.location.hash) {
							var query = (0, _utils.parseQueryString)(window.location.search.substring(1).replace(/\/$/, ''));
							var hash = (0, _utils.parseQueryString)(window.location.hash.substring(1).replace(/[\/$]/, ''));
							queryStringData = Object.assign({}, query, hash);
							closing = _this2.props.autoClose;
						} else {
							console.info('OAuth redirect has occurred but no query or hash parameters were found.');
						}
					}
				} catch (error) {
					// Ignore DOMException: Blocked a frame with origin from accessing a cross-origin frame.
					// A hack to get around same-origin security policy errors in Internet Explorer.
				}
			}, 250);
		}
	}, {
		key: 'renderInternalElement',
		value: function renderInternalElement() {
			if (this.props.children instanceof Array) {
				return this.props.children;
			}
			return _react2.default.cloneElement(this.props.children, {
				onClick: this.onClick
			});
		}
	}, {
		key: 'render',
		value: function render() {
			return this.props.children ? this.renderInternalElement(this.props) : _react2.default.createElement(
				'button',
				{ onClick: this.onClick,
					style: this.props.style,
					className: this.props.className
				},
				this.props.label
			);
		}
	}]);

	return PopupButton;
}(_react2.default.Component);

PopupButton.generateSpec = function (options) {
	return Object.keys(options).reduce(function (previous, current, index) {
		var final = index == 1 ? previous + '=' + options[previous] : previous;
		return final + ',' + current + '=' + options[current];
	});
};

PopupButton.defaultProps = defaultProps;
PopupButton.propTypes = propTypes;

exports.default = PopupButton;