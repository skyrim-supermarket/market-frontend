'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});
exports.exchangeCodeForToken = exports.refreshToken = exports.logout = exports.login = exports.signup = undefined;

var _config = require('./internals/config');

var _config2 = _interopRequireDefault(_config);

var _defaults = require('./internals/defaults');

var _utils = require('./internals/utils');

var _shared = require('./shared');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var signup = exports.signup = function signup(userData, options) {
	var baseUrl = _config2.default.baseUrl,
	    signupUrl = _config2.default.signupUrl;

	var url = baseUrl + signupUrl;
	var opts = Object.assign({}, _defaults.fetchOpts, {
		method: 'POST',
		body: JSON.stringify(userData)
	});

	return fetch(url, opts).then(_utils.checkResponseStatus).then(_utils.parseResponseToJSON).then(function (data) {
		return { token: (0, _shared.setToken)(data.token) };
	});
};

var login = exports.login = function login(userData, options) {
	var baseUrl = _config2.default.baseUrl,
	    loginUrl = _config2.default.loginUrl;

	var url = baseUrl + loginUrl;
	var opts = Object.assign({}, _defaults.fetchOpts, {
		method: 'POST',
		body: JSON.stringify(userData)
	}, options);

	return fetch(url, opts).then(_utils.checkResponseStatus).then(_utils.parseResponseToJSON).then(function (data) {
		return { token: (0, _shared.setToken)(data.token) };
	});
};

var logout = exports.logout = function logout() {
	return new Promise(function (resolve, reject) {
		setTimeout(function () {
			if (!!(0, _shared.getToken)()) {
				(0, _shared.removeToken)();
				resolve({ success: true });
			} else {
				reject(new Error('You are trying to log out unauthenticated user.'));
			}
		});
	});
};

var refreshToken = exports.refreshToken = function refreshToken(options) {
	var baseUrl = _config2.default.baseUrl,
	    refreshUrl = _config2.default.refreshUrl;

	var url = baseUrl + refreshUrl;
	var opts = Object.assign({}, _defaults.fetchOpts, {
		method: 'GET',
		headers: Object.assign({}, _defaults.fetchOpts.headers, (0, _shared.getAuthHeader)())
	}, options);
	return fetch(url, opts).then(_utils.checkResponseStatus).then(_utils.parseResponseToJSON).then(function (data) {
		return { token: (0, _shared.setToken)(data.token) };
	});
};

var exchangeCodeForToken = exports.exchangeCodeForToken = function exchangeCodeForToken(provider, oauthData, options) {
	var baseUrl = _config2.default.baseUrl,
	    oauthUrl = _config2.default.oauthUrl;

	var url = baseUrl + oauthUrl.replace('{provider}', provider);
	var opts = Object.assign({}, _defaults.fetchOpts, {
		method: 'POST',
		body: JSON.stringify(oauthData)
	}, options);
	return fetch(url, opts).then(_utils.checkResponseStatus).then(_utils.parseResponseToJSON).then(function (data) {
		return { token: (0, _shared.setToken)(data.token) };
	});
};