'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _storage = require('./storage');

var _storage2 = _interopRequireDefault(_storage);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } // Storage Component for React
// ------------------------------------------------------------------
// It stores data in `localStorage`, `sessionStorage` or caches it
// Additionally it makes data available between different components
//
// Inspired by:
//  - https://github.com/yuanyan/react-storage
//  - https://github.com/sahat/satellizer/blob/master/src/storage.ts
// ------------------------------------------------------------------

var StorageComponent = function (_React$Component) {
	_inherits(StorageComponent, _React$Component);

	function StorageComponent(props) {
		_classCallCheck(this, StorageComponent);

		return _possibleConstructorReturn(this, (StorageComponent.__proto__ || Object.getPrototypeOf(StorageComponent)).call(this, props));
	}

	_createClass(StorageComponent, [{
		key: 'componentWillUpdate',
		value: function componentWillUpdate() {
			if (this.props.autoSave) {
				this.save();
				this.storage = new _storage2.default();
			}
		}
	}, {
		key: 'save',
		value: function save() {
			var value = this.props.useRaw ? this.props.value : JSON.stringify(this.props.value);

			_storage2.default.set(this.props.name, value);
		}
	}, {
		key: 'render',
		value: function render() {
			return '[property value for ' + this.props.name + ']';
		}
	}]);

	return StorageComponent;
}(_react2.default.Component);

exports.default = StorageComponent;


_storage2.default.propTypes = {
	name: _react.PropTypes.string.isRequired,
	value: _react.PropTypes.oneOfType([_react.PropTypes.string, _react.PropTypes.object, _react.PropTypes.array]),
	useRaw: _react.PropTypes.bool,
	autoSave: _react.PropTypes.bool,
	cache: _react.PropTypes.object,
	storage: _react.PropTypes.object
}, _storage2.default.defaultProps = DataStore.defaults;

_storage2.default.get = function (key) {
	return undefined.storage.get(key);
};

_storage2.default.set = function (key, value) {
	return undefined.storage.remove(key, value);
};

_storage2.default.remove = function (key) {
	return undefined.storage.remove(key);
};