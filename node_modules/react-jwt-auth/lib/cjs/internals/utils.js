'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.preventBadFacebookHash = exports.parseQueryString = exports.isDefined = exports.parseJWT = exports.parseResponseToJSON = exports.checkResponseStatus = undefined;

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

var _enverse = require('enverse');

var _enverse2 = _interopRequireDefault(_enverse);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var checkResponseStatus = exports.checkResponseStatus = function checkResponseStatus(response) {
  if (response.status >= 200 && response.status < 300) {
    return response;
  } else {
    var error = new Error(response.statusText);
    error.response = response;
    throw error;
  }
};

var parseResponseToJSON = exports.parseResponseToJSON = function parseResponseToJSON(response) {
  return response.json();
};

var parseJWT = exports.parseJWT = function parseJWT(token) {
  if (!token) return null;
  var base64Url = token;
  var base64 = base64Url.replace(/-/g, '+').replace(/_/g, '/');

  var parts = base64.split('.');
  if (parts.length != 3) return null;

  try {
    var _parts = _slicedToArray(parts, 3),
        headerRaw = _parts[0],
        payloadRaw = _parts[1],
        signatureRaw = _parts[2];

    var header = JSON.parse(atob(headerRaw));
    var payload = JSON.parse(atob(payloadRaw));
    var signature = atob(signatureRaw);
    return {
      header: header,
      payload: payload,
      signature: signature
    };
  } catch (err) {
    console.error(err);
    return null;
  }
};

var isDefined = exports.isDefined = function isDefined(value) {
  return value !== undefined && value !== null;
};

var parseQueryString = exports.parseQueryString = function parseQueryString(str) {
  var obj = {},
      keyValue = void 0,
      key = void 0,
      val = void 0;
  if (typeof str !== 'string') {
    throw new Error('Non-string values are not allowed.');
  }
  (str || '').split('&').forEach(function (keyValueStr) {
    if (keyValueStr) {
      keyValue = keyValueStr.split('=');
      key = decodeURIComponent(keyValue[0]);
      val = isDefined(keyValue[1]) ? decodeURIComponent(keyValue[1]) : true;
      if (val === 'true' || val === true) {
        val = true;
      } else if (val === 'false' || val === false) {
        val = false;
      } else if (!isNaN(val)) {
        val = parseInt(val);
      }
      obj[key] = val;
    }
  });
  return obj;
};

// HotFix: Facebook redirects back with '_=_' hash which breaks the app
var preventBadFacebookHash = exports.preventBadFacebookHash = function preventBadFacebookHash() {
  var fbHashAppendix = /_=_/;
  if (_enverse2.default.has.window) {
    if (fbHashAppendix.test(window.location.hash)) {
      window.location.hash = window.location.hash.replace(fbHashAppendix, '');
    }
  }
};